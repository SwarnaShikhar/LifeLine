<div id="customAlertBox" class="custom-alert">
    <div class="custom-alert-content">
      <span id="customAlertMessage"></span>
      <input type="text" id="aadharInput" placeholder="Enter Aadhar number">
      <button id="customAlertButton">Verify</button>
    </div>
  </div>
  
  
  <script>
    // Function to display the custom alert box
  function customAlert(message, callback) {
    // Set the alert message
    document.getElementById('customAlertMessage').textContent = message;
  
    // Show the custom alert box
    document.getElementById('customAlertBox').style.display = 'flex';
  
    // Add an event listener to the Verify button
    document.getElementById('customAlertButton').addEventListener('click', function() {
      // Get the entered Aadhar number
      var aadharInput = document.getElementById('aadharInput').value;
  
      // Verify the entered Aadhar number
      var isValidAadhar = /^\d{12}$/.test(aadharInput);
  
      if (isValidAadhar) {
        // Hide the custom alert box
        document.getElementById('customAlertBox').style.display = 'none';
  
        // Invoke the callback function, if provided
        if (typeof callback === 'function') {
          callback();
        }
      } else {
        // Show an error message if the Aadhar number is invalid
        alert('Invalid Aadhar number. Please try again.');
      }
    });
  }
  
  // Function to show the page's content
  function showContent() {
    // Display the content of your page here
    alert('Access granted! You can now view the page\'s content.');
  }
  
  // Example usage:
  customAlert('Please enter your Aadhar number to access the page.', showContent);
  
  </script>
  
  <style>
  .custom-alert {
    display: none;
    position: fixed;
    z-index: 9999;
    left: 0;
    top: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(0, 0, 0, 0.6);
    align-items: center;
    justify-content: center;
  }
  
  .custom-alert-content {
    background-color: white;
    padding: 20px;
    border-radius: 5px;
    text-align: center;
  }
  
  .custom-alert-content #customAlertMessage {
    display: block;
    margin-bottom: 15px;
  }
  
  .custom-alert-content #aadharInput {
    margin-bottom: 15px;
    padding: 5px;
  }
  
  .custom-alert-content #customAlertButton {
    padding: 5px 15px;
  }
  
  </style>

  <!DOCTYPE html>
<html>
<head>
  <style>
    /* CSS styling for the buttons */
    .blood-group-button {
      padding: 10px 20px;
      margin: 5px;
      font-size: 16px;
      cursor: pointer;
    }

    /* CSS styling for the table */
    #blood-group-table {
      border-collapse: collapse;
      width: 100%;
    }

    #blood-group-table th,
    #blood-group-table td {
      padding: 8px;
      text-align: left;
      border-bottom: 1px solid #ddd;
    }

    #blood-group-table th {
      background-color: #f2f2f2;
    }
  </style>
</head>
<body>
  <h1>Blood Group Filter</h1>
  <div id="blood-group-buttons">
    <button class="blood-group-button" onclick="fetchData('A Positive')">Blood Group A</button>
    <button class="blood-group-button" onclick="fetchData('B Positive')">Blood Group B</button>
    <button class="blood-group-button" onclick="fetchData('AB Positive')">Blood Group AB</button>
    <button class="blood-group-button" onclick="fetchData('O Positive')">Blood Group O</button>
  </div>

  <table id="blood-group-table" style="display: none;"></table>

  <script>
    function fetchData(bloodGroup) {
      // Replace 'API_ENDPOINT' with the actual URL of your API
      const apiEndpoint = 'http://localhost:3000/plasmaLinksData/';

      // Append the blood group as a query parameter to the API endpoint
      const url = apiEndpoint + '?bloodGroup=' + bloodGroup;

      // Make a GET request to the API using fetch()
      fetch(url)
        .then(response => response.json())
        .then(data => {
          // Hide the buttons
          document.getElementById('blood-group-buttons').style.display = 'none';

          // Create and populate the table
          const table = document.getElementById('blood-group-table');

          // Clear any existing rows in the table
          while (table.firstChild) {
            table.removeChild(table.firstChild);
          }

          // Create the table header row
          const headerRow = document.createElement('tr');
          const headers = ['Name', 'Phone Number', 'Location']; // Example column names
          headers.forEach(headerText => {
            const header = document.createElement('th');
            header.textContent = headerText;
            headerRow.appendChild(header);
          });
          table.appendChild(headerRow);

          // Create a row for each data entry and populate the columns
          data.forEach(entry => {
            const row = document.createElement('tr');
            const columns = ['name', 'phoneNo', 'location']; // Corresponding data keys
            columns.forEach(column => {
              const cell = document.createElement('td');
              cell.textContent = entry[column];
              row.appendChild(cell);
            });
            table.appendChild(row);
          });

          // Display the table
          table.style.display = 'table';
        })
        .catch(error => {
          console.error('Error:', error);
          // Handle error scenarios here
        });
    }
  </script>
</body>
</html>
